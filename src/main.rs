mod helpers;

use num::{BigRational, BigInt, FromPrimitive, bigint::Sign};
use std::str::FromStr;
use crate::helpers::to_f64;

fn nu(x: &str) -> BigRational {
    BigRational::new(BigInt::from_str(x).unwrap(), BigInt::from_str("1").unwrap())
}

fn i(i: i64) -> BigRational {
    BigRational::from_integer(FromPrimitive::from_i64(i).unwrap())
}

fn cf(mut integers: Vec<i64>) -> BigRational {
    let mut sum = i(1);
    integers.reverse();
    for x in integers.iter() {
        sum = i(*x) + i(1) / sum;
    }
    sum
}

fn sqrt_2() -> BigRational {
    cf(vec!(1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2))
}

fn sp() -> BigRational { // sqrt(2 + sqrt(2))
    cf(vec!(1, 1, 5, 1, 1, 3, 6, 1, 3, 3, 10, 10, 1, 1, 1, 5, 2, 3, 1, 1, 3, 6, 1, 8, 74, 2, 1, 2, 4, 2, 4, 3, 5, 9, 4, 3, 1, 1, 1, 2, 1, 17, 6, 1, 2, 12, 1, 1, 1, 2, 1, 24, 1, 2, 1, 2, 9, 989, 2, 13, 1, 5, 1, 1, 1, 64, 2, 2, 1, 1, 9, 1, 3, 1, 1, 1, 2, 3, 11, 2, 3, 1, 10, 16, 2, 1, 2, 6, 4, 2, 3, 3, 3, 4, 1, 151, 1, 4, 1, 4, 2, 1, 2, 3, 1, 1, 6, 3, 1, 1, 1, 5))
}

fn sn() -> BigRational { // sqrt(2 - sqrt(2))
    cf(vec!(0, 1, 3, 3, 1, 4, 2, 7, 1, 9, 12, 4, 6, 1, 19, 5, 8, 1, 2, 1, 6, 7, 2, 1, 1, 2, 8, 1, 20, 1, 1, 1, 3, 6, 1, 3, 1, 1, 4, 2, 16, 1, 3, 1, 2, 1, 14, 8, 4, 10, 1, 8, 2, 1, 55, 7, 1, 1, 1, 1, 3, 6, 2, 3, 1, 11, 1, 2, 1, 2, 1, 1, 7, 1, 2, 1, 1, 2, 1, 14, 3, 10, 1, 1, 1, 5, 1, 1, 1, 19, 1, 2, 51, 5, 3, 3, 1, 5, 1, 1, 9, 1, 5, 1, 5, 4, 58, 2, 8, 2, 1, 1, 2, 4))
}

fn pp() -> BigRational { // sqrt(2 + sqrt(2 + sqrt(2)))
    cf(vec!(1, 1, 25, 46, 21, 1, 1, 3, 1, 6, 1, 1, 2, 7, 1, 1, 2, 1, 2, 1, 1, 3, 2, 1, 3, 5, 1, 21, 1, 3, 1, 4, 1, 22, 1, 1, 1, 1, 3, 2, 2, 7, 1, 5, 3, 1, 37, 1, 1, 2, 2, 1, 4, 1, 1, 3, 8, 10, 1, 1, 1, 4, 1, 2, 1, 5, 3, 11, 1, 2, 2, 1, 2, 1, 55, 25, 2, 1, 2, 4, 2, 1, 9, 1, 1, 1, 1, 1, 1, 1, 1, 2, 12, 2, 1, 39, 4, 1, 2, 3, 1, 4, 2, 1, 34, 234, 1, 14, 6, 2, 1))
}

fn pn() -> BigRational { // sqrt(2 + sqrt(2 - sqrt(2)))
    cf(vec!(1, 1, 1, 1, 29, 7, 35, 21, 1, 2, 1, 37, 2, 2, 1, 2, 21, 1, 1, 1, 6, 1, 1, 1, 2, 1, 1, 1, 27, 3, 1, 8, 73, 4, 13, 2, 1, 11, 2, 4, 1, 3, 2, 16, 2, 24, 1, 1, 1, 1, 1, 13, 4, 4, 3, 1, 55, 5, 3, 10, 2, 1, 55, 1, 1, 6, 119, 1, 4, 2, 1, 1, 5, 20, 2, 1, 5, 2, 1, 6, 1, 2, 1, 3, 1, 8, 1, 6, 1, 8, 1, 3, 2, 2, 1, 1, 2, 2, 10, 2, 11, 1, 2, 2, 1, 5, 2, 2, 2, 1))
}

fn nn() -> BigRational {
    cf(vec!(1, 8, 1, 419, 1, 2, 10, 1, 1, 43, 1, 8, 2, 1, 3, 5, 1, 4, 2, 53, 1, 4, 22, 6, 1, 2, 1, 1, 1, 2, 6, 1, 3, 2, 10, 1, 7, 1, 2, 5, 6, 17, 8, 1, 1, 1, 1, 7, 1, 18, 1, 2, 8, 5, 6, 1, 1, 1, 2, 2, 4, 1, 1, 1, 37, 1, 1, 7, 4, 35, 1, 9, 1, 4, 1, 16, 2, 1, 4, 1, 1, 7, 1, 3, 1, 11, 10, 4, 1, 2, 1, 2, 8, 1, 1, 16, 5, 1, 1, 1, 39, 1, 1, 1, 1, 6, 1, 1, 1, 4, 1, 1))
}

fn np() -> BigRational { // sqrt(2 - sqrt(2 + sqrt(2)))
    cf(vec!(0, 2, 1, 1, 3, 2, 8, 1, 27, 1, 1, 2, 1, 3, 3, 1, 3, 1, 4, 1, 19, 1, 5, 34, 1, 1, 135, 141, 3, 1, 1, 85, 1, 6, 47, 2, 113, 2, 4, 1, 1, 1, 2, 9, 15, 7, 1, 1, 5, 2, 4, 1, 1, 2, 7, 1, 1, 5, 24, 2, 5, 1, 1, 4, 11, 3, 1, 3, 5, 1, 1, 1, 1, 26, 4, 23, 32, 1, 4, 1, 43, 12, 2, 15, 1, 1, 3, 3, 1, 3, 13, 1, 1, 3, 2, 1, 1, 25, 5, 1, 1, 2, 22, 2, 1, 3, 1, 3))
}

fn power3() -> BigRational { // 2 ** (3/2)
    cf(vec!(2, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4))
}

fn power7() -> BigRational {
    cf(vec!(11, 3, 5, 3, 22, 3, 5, 3, 22, 3, 5, 3, 22, 3, 5, 3, 22, 3, 5, 3, 22, 3, 5, 3, 22, 3, 5, 3, 22, 3, 5, 3, 22, 3, 5, 3, 22, 3, 5, 3, 22, 3, 5, 3, 22, 3, 5, 3, 22, 3, 5, 3, 22, 3, 5, 3, 22, 3, 5, 3, 22, 3, 5, 3, 22, 3, 5, 3, 22, 3, 5, 3, 22, 3, 5, 3, 22, 3, 5, 3, 22, 3, 5, 3, 22, 3, 5, 3, 22, 3, 5, 3, 22, 3, 5, 3, 22, 3, 5, 3, 22, 3, 5, 3, 22))
}

fn power9() -> BigRational {
    cf(vec!(22, 1, 1, 1, 2, 6, 11, 6, 2, 1, 1, 1, 44,  1, 1, 1, 2, 6, 11, 6, 2, 1, 1, 1, 44,  1, 1, 1, 2, 6, 11, 6, 2, 1, 1, 1, 44,  1, 1, 1, 2, 6, 11, 6, 2, 1, 1, 1, 44,  1, 1, 1, 2, 6, 11, 6, 2, 1, 1, 1, 44,  1, 1, 1, 2, 6, 11, 6, 2, 1, 1, 1, 44,  1, 1, 1, 2, 6, 11, 6, 2, 1, 1, 1, 44,  1, 1, 1, 2, 6, 11, 6, 2, 1, 1, 1, 44,  1, 1, 1, 2, 6, 11, 6, 2, 1, 1, 1, 44,  1, 1, 1, 2, 6, 11, 6, 2, 1, 1, 1, 44,  1, 1, 1, 2, 6, 11, 6, 2, 1, 1, 1, 44,  1, 1, 1, 2, 6, 11, 6, 2, 1, 1, 1, 44,  1, 1, 1, 2, 6, 11, 6, 2, 1, 1, 1, 44,  1, 1, 1, 2, 6, 11, 6, 2, 1, 1, 1, 44,  1, 1, 1, 2, 6, 11, 6, 2, 1, 1, 1, 44))
}

fn power17() -> BigRational {
    cf(vec!(362, 25, 1, 6, 14, 1, 1, 1, 2, 1, 2, 9, 1, 4, 1, 14, 1, 1, 2, 1, 4, 1, 1, 3, 11, 31, 2, 1, 1, 5, 9, 1, 2, 1, 5, 1, 1, 1, 41, 1, 16, 1, 2, 6, 7, 1, 44, 2, 1, 1, 1, 5, 1, 5, 4, 4, 10, 2, 2, 2, 1, 5, 2, 1, 1, 1, 3, 1, 6, 1, 2, 7, 1, 1, 10, 1, 3, 1, 1, 2, 2, 8, 1, 2, 1, 22, 1, 1, 1, 1, 2, 4, 2, 2, 3, 3, 2, 103, 181, 103, 2, 3, 3, 2, 2, 4, 2, 1, 1, 1, 1))
}

fn power19() -> BigRational {
    cf(vec!(724, 12, 1, 13, 7, 3, 6, 2, 1, 4, 2, 2, 2, 7, 3, 2, 10, 7, 5, 1, 1, 15, 5, 11, 4, 1, 6, 1, 2, 3, 84, 1, 7, 1, 5, 3, 15, 1, 21, 1, 2, 4, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 2, 2, 2, 11, 1, 3, 8, 1, 2, 1, 5, 3, 1, 3, 5, 2, 1, 1, 3, 1, 4, 4, 2, 1, 2, 11, 3, 3, 1, 8, 1, 4, 1, 1, 1, 1, 4, 51, 1, 1, 90, 206, 1, 6, 1, 1, 2, 2, 1, 1, 1, 2, 4, 46, 2, 1))
}

fn power25() -> BigRational {
    cf(vec!(5792, 1, 1, 1, 1, 1, 1, 1, 7, 26, 3, 1, 6, 2, 1, 12, 28, 1, 4, 3, 7, 1, 3, 2, 1, 1, 3, 1, 1, 1, 3, 1, 6, 1, 1, 1, 3, 10, 170, 3, 1, 1, 1, 7, 32, 2, 2, 2, 1, 39, 1, 1, 1, 17, 1, 13, 1, 2, 3, 97, 17, 1, 47, 7, 1, 6, 1, 3, 39, 1, 4, 1, 5, 1, 3, 2, 7, 4, 1, 1, 1, 18, 2, 3, 1, 5, 1, 2, 4, 1, 10, 1, 1, 413, 4, 4, 2, 1, 15, 1, 1, 3, 1, 5, 16, 2, 4))
}

fn power41() -> BigRational {
    nu("1048576") * sqrt_2()
}

fn power37() -> BigRational {
    nu("262144") * sqrt_2()
}

fn power27() -> BigRational {
    cf(vec!(11585, 4, 4, 1, 3, 52, 1, 1, 13, 1, 2, 6, 57, 1, 1, 1, 1, 1, 15, 1, 1, 5, 8, 3, 1, 1, 14, 3, 1, 1, 1, 4, 1, 1, 84, 1, 1, 1, 3, 15, 16, 4, 1, 5, 1, 19, 3, 36, 1, 6, 2, 1, 6, 48, 1, 1, 8, 2, 23, 1, 1, 3, 2, 3, 2, 1, 1, 1, 19, 2, 2, 2, 2, 1, 7, 1, 14, 2, 3, 37, 1, 7, 1, 2, 2, 1, 9, 1, 4, 1, 3, 206, 1, 1, 1, 1, 1, 1, 1, 2, 32, 8, 1, 2, 32, 1, 8, 1))
}

fn power21() -> BigRational {
    cf(vec!(1448, 6, 2, 6, 1, 1, 3, 6, 3, 5, 1, 1, 1, 2, 2, 2, 1, 3, 6, 1, 20, 3, 1, 1, 2, 3, 1, 7, 10, 5, 1, 1, 1, 1, 14, 2, 1, 1, 169, 1, 3, 2, 2, 1, 1, 1, 31, 1, 10, 2, 1, 9, 2, 2, 2, 4, 4, 3, 2, 2, 1, 4, 1, 23, 1, 1, 17, 2, 11, 1, 1, 7, 2, 1, 2, 3, 1, 1, 9, 2, 5, 2, 1, 5, 6, 1, 1, 18, 1, 1, 1, 4, 9, 25, 1, 3, 45, 413, 1, 2, 1, 3, 1, 5, 3, 1, 8, 23, 4, 8))
}

fn main() {
    let s2 = sqrt_2();
    let sq = s2.clone();
    let p = sp();
    let n = sn();
    let pp = pp();
    let pn = pn();
    let np = np();
    let nn = nn();
    let power = power3();
    let pt = power3();
    let ps = power7();
    let pq = power9();
    let pr = power17();
    let pu = power19();
    let pv = power25();
    let pw = power41();
    let px = power37();
    let py = power27();
    let pz = power21();

    let a = (nu("5276905920")*pp.clone()+nu("56041792")*np.clone()-nu("3877289416")*p.clone()-nu("1115144485")*sq.clone()-nu("123253560")*n.clone()+nu("2337281856")*pn.clone()+nu("446272960")*nn.clone()-nu("5819376420"))/nu("212837625");
    let b = ((-nu("737323405")*pq.clone())+nu("54866514560")*pp.clone()+nu("519798656")*np.clone()-nu("40635843248")*p.clone()-nu("1403872080")*n.clone()+nu("24212243328")*pn.clone()+nu("4517161600")*nn.clone()-nu("60904347075"))/nu("1277025750");
    let c = ((-nu("3498123265")*pt.clone())+nu("32617087360")*pp.clone()+nu("162643072")*np.clone()-nu("23930482576")*p.clone()-nu("993364080")*n.clone()+nu("14367889536")*pn.clone()+nu("2568513920")*nn.clone()-nu("35883097965"))/nu("1277025750");
    let d = ((-nu("20405")*ps.clone())+nu("1052480")*pp.clone()-nu("69184")*np.clone()-nu("786968")*p.clone()-nu("43240")*n.clone()+nu("484288")*pn.clone()+nu("105280")*nn.clone()-nu("1242060"))/nu("496125");
    let e = -((-nu("2498167")*pq.clone())+nu("183924224")*pp.clone()+nu("2556416")*np.clone()-nu("136202528")*p.clone()-nu("6301152")*n.clone()+nu("83317248")*pn.clone()+nu("15414784")*nn.clone()-nu("204438168"))/nu("9823275");
    let f = -((-nu("3985345")*pz.clone())+nu("18853852160")*pp.clone()+nu("144382976")*np.clone()-nu("13983377408")*p.clone()-nu("584570880")*n.clone()+nu("8363916288")*pn.clone()+nu("1687598080")*nn.clone()-nu("20766620160"))/nu("638512875");
    let g = -((-nu("153335")*py.clone())+nu("5728419840")*pp.clone()+nu("26361856")*np.clone()-nu("4214898688")*p.clone()-nu("141803520")*n.clone()+nu("2545041408")*pn.clone()+nu("491438080")*nn.clone()-nu("6352220160"))/nu("212837625");
    let h = -((-nu("7735")*px.clone())+nu("9933946880")*pp.clone()+nu("26476544")*np.clone()-nu("7347372032")*p.clone()-nu("173015040")*n.clone()+nu("4365484032")*pn.clone()+nu("706478080")*nn.clone()-nu("10964828160"))/nu("638512875");
    let i = -((-nu("455")*pw.clone())+nu("2998927360")*pp.clone()+nu("4194304")*np.clone()-nu("2099249152")*p.clone()-nu("31457280")*n.clone()+nu("1145044992")*pn.clone()+nu("146800640")*nn.clone()-nu("3373793280"))/nu("638512875");


    println!("a = {:?}", a.clone());
    println!("b = {:?}", b.clone());
    println!("c = {:?}", c.clone());
    println!("d = {:?}", d.clone());
    println!("e = {:?}", e.clone());
    println!("f = {:?}", f.clone());
    println!("g = {:?}", g.clone());
    println!("h = {:?}", h.clone());
    println!("i = {:?}", i.clone());

    let coeffs = vec!(a, nu("0"), b, nu("0"), c, nu("0"), d, nu("0"), e, nu("0"), f, nu("0"), g, nu("0"), h, nu("0"), i);

    for arg in std::env::args().skip(1) {
        let x = nu(&arg) / nu("4611686018427387904");
        let two = nu("2");
        let mut tn = vec!(nu("1"), x.clone());
        let mut sum = nu("0");
        for i in 0..coeffs.len() {
            if i == 0 {
                sum += coeffs[i].clone() * tn[i].clone();
            } else if i == 1 {
                sum += coeffs[i].clone() * tn[i].clone();
            } else {
                tn.push(tn[i - 1].clone() * two.clone() * x.clone() - tn[i - 2].clone());
                sum += coeffs[i].clone() * tn[i].clone();
            }
        }
        println!("cos({}) = {}", nu(&arg), to_f64(sum).unwrap());
    }
}
