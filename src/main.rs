mod helpers;

use crate::helpers::to_f64;
use num::{rational::Ratio, BigInt, BigRational, FromPrimitive};
use std::str::FromStr;

fn nu(x: &str) -> BigRational {
    BigRational::new(BigInt::from_str(x).unwrap(), BigInt::from_str("1").unwrap())
}

fn r(num: i128, denom: i128) -> BigRational {
    BigRational::new(BigInt::from_i128(num).unwrap(), BigInt::from_i128(denom).unwrap())
}

fn cos(x: u64) -> f64 {
    let pi = 1i128 << 63;
    
    let s1 = 8;
    let s2 = s1 - 4;

    // 58 bits per thing
    let a = r(36028797018963968, pi  >> s1);
    let b = -r(2844719788994575541 >> s2, pi >> s1);
    let c = r(2339688245777237847 >> s2, pi >> s1);
    let d = -r(769726580256667242 >> s2, pi >> s1);
    let e = r(135658872216648473 >> s2, pi >> s1);
    let f = -r(14876660023444091 >> s2, pi >> s1);
    let g = r(1112323833186196 >> s2, pi >> s1);
    let h = -r(60319567095562 >> s2, pi >> s1);
    let i = r(2479681043626 >> s2, pi >> s1);
    let j = -r(77920990521 >> s2, pi >> s1);

    let coeffs = vec![i, h, g, f, e, d, c, b, a];

    let x = Ratio::new(
        BigInt::from_u64(x).unwrap(),
        BigInt::from_i128(pi).unwrap(),
    );

    let mut sum = Ratio::new(BigInt::from_i8(0).unwrap(), BigInt::from_i8(1).unwrap());

    // currently, sum = sum + coeffs[i] * p1,
    // I want, sum = coeffs[len - i - 1]
    // sum = sum * x^2 + coeffs[len - i - 1]
    //
    // tn = 2*t(n-1)*x - t(n-2)
    // sum = t0 * a + t2 * b + t4 * c + t6 * d + t8 * e ...
    // sum = 1 * a + (2 * x * 

    for i in 0..coeffs.len() {
        if i == 0 {
            sum += coeffs[i].clone() + j.clone() * x.clone() * x.clone(); // is same a sum += ... * 1
        } else {
            sum = sum * x.clone() * x.clone() + coeffs[i].clone();
        }
    }
    to_f64(sum).unwrap()
}

fn main() {
    for arg in std::env::args().skip(1) {
        println!("cos({}) = {}", nu(&arg), cos(u64::from_str(&arg).unwrap()));
    }
}

#[test]
fn cos_does_not_lose_precision() {
    let questions = vec![
        0,
        144115188075855872,
        288230376151711744,
        432345564227567616,
        576460752303423488,
        720575940379279360,
        864691128455135232,
        1008806316530991104,
        1152921504606846976,
        1297036692682702848,
        1441151880758558720,
        1585267068834414592,
        1729382256910270464,
        1873497444986126336,
        2017612633061982208,
        2161727821137838080,
        2305843009213693952,
        2449958197289549824,
        2594073385365405696,
        2738188573441261568,
        2882303761517117440,
        3026418949592973312,
        3170534137668829184,
        3314649325744685056,
        3458764513820540928,
        3602879701896396800,
        3746994889972252672,
        3891110078048108544,
        4035225266123964416,
        4179340454199820288,
        4323455642275676160,
        4467570830351532032,
        4611686018427387904,
    ];
    let answers = vec![
        1.0,
        0.9987954562051724,
        //  0.99879545620517239271
        0.9951847266721969,
        //  0.99518472667219688624
        0.989176509964781,
        //  0.98917650996478097345
        0.9807852804032304,
        //  0.98078528040323044912
        0.970031253194544,
        //  0.97003125319454399260
        0.9569403357322088,
        //  0.95694033573220886493
        0.9415440651830208,
        //  0.94154406518302077841
        0.9238795325112867,
        //  0.92387953251128675612
        0.9039892931234433,
        //  0.90398929312344333158
        0.881921264348355,
        //  0.88192126434835502971
        0.8577286100002721,
        //  0.85772861000027206990
        0.8314696123025452,
        //  0.83146961230254523707
        0.8032075314806449,
        //  0.80320753148064490980
        0.773010453362737,
         //  0.77301045336273696081
        0.7409511253549591,
        //  0.74095112535495909117
        0.7071067811865476,
        //  0.70710678118654752440
        0.6715589548470184,
        //  0.67155895484701840062
        0.6343932841636455,
        //  0.63439328416364549821
        0.5956993044924334,
        //  0.59569930449243334346
        0.5555702330196022,
        //  0.55557023301960222474
        0.5141027441932218,
        //  0.51410274419322172659
        0.47139673682599764,
        //  0.47139673682599764855
        0.4275550934302821,
        //  0.42755509343028209432
        0.3826834323650898,
        //  0.38268343236508977172
        0.33688985339222005,
        //  0.33688985339222005068
        0.2902846772544624,
        //  0.29028467725446236763
        0.2429801799032639,
        //  0.24298017990326388994
        0.19509032201612828,
        //  0.19509032201612826784 (exactly equal) 7 pi / 16
        0.14673047445536175,
        //  0.14673047445536175165
        0.0980171403295606,
        //  0.09801714032956060199 15 / 32
        0.049067674327418015,
        //  0.04906767432741801425
        0.0,
    ];
    for i in 0..33 {
        assert_eq!(cos(questions[i]), answers[i]);
    }
}
